<%- include('./header', { user: user, page: 'index', doodle: doodle }) %>

<title>Doodles</title>
<script>
var base_url = location.origin + '/';
var undos = [];
var redos = [];
var stroke = null; //. { color: color, width: width, xys: [] }
var backgroundcolor = null;

$(function(){
  //. ヒストリバック無効化
  if( window.history && window.history.pushState ){
    history.pushState( "nohb", null, null );
    $(window).on( "popState", function( evt ){
      if( !event.originalEvent.state ){
        history.pushState( "nohb", null, null );
        return;
      }
    });
  }

	init();
});

function init(){
<% if( id ){ %>
  $('#doodle_id').val( '<%= id %>' );
<% }else{ %>
  $('#doodle_id').val( '' );
<% } %>
<% if( doodle && doodle.text ){ %>
  $('#doodle_text').val( '<%= doodle.text %>' );
<% }else{ %>
  $('#doodle_text').val( '' );
<% } %>

  $('#cdiv').html( '<canvas width="80%" height="50%" id="mycanvas"></canvas>' );

  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );
  //. マウスの座標を取得
  var mouse = {
    startX: 0,
    startY: 0,
    x: 0,
    y: 0,
    color: "black",
    isDrawing: false
  };
  var borderWidth = 1;
  canvas.addEventListener( "mousemove", function( e ){
    //. マウスが動いたら座標値を取得
    var rect = e.target.getBoundingClientRect();
    mouse.x = e.clientX - rect.left - borderWidth;
    mouse.y = e.clientY - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      var color = $('#select_color').val();
      if( color == 'transparent' ){
        ctx.globalCompositeOperation = 'destination-out';
      }else{
        ctx.globalCompositeOperation = 'source-over';
      }

      ctx.beginPath();
      ctx.lineWidth = parseInt( $('#select_linewidth').val() );
      ctx.lineCap = 'round';
      ctx.moveTo( mouse.startX, mouse.startY );
      ctx.lineTo( mouse.x, mouse.y );
      if( color != 'transparent' ){
        ctx.strokeStyle = color;
      }
      ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;

      if( stroke ){
        stroke.xys.push( [ mouse.x, mouse.y ] );
      }
    }
  });
  //. マウスを押したら、描画OK(myDrawをtrue)
  canvas.addEventListener( "mousedown", function( e ){
    mouse.isDrawing = true;
    mouse.startX = mouse.x;
    mouse.startY = mouse.y;

    stroke = {};
    stroke.color = $('#select_color').val();
    stroke.width = parseInt( $('#select_linewidth').val() );
    stroke.xys = [ [ mouse.x, mouse.y ] ];
  });
  //. マウスを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "mouseup", function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });
  canvas.addEventListener( 'mouseleave', function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });

  canvas.addEventListener( "touchmove", function( e ){
    //. タッチが動いたら座標値を取得
    var t = e.changedTouches[0];
    var rect = e.target.getBoundingClientRect();
    //mouse.x = e.pageX - rect.left - borderWidth;
    //mouse.y = e.pageY - rect.top - borderWidth;
    mouse.x = ( isAndroid() ? t.pageX : e.pageX ) - rect.left - borderWidth;
    mouse.y = ( isAndroid() ? t.pageY : e.pageY ) - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      var color = $('#select_color').val();
      if( color == 'transparent' ){
        ctx.globalCompositeOperation = 'destination-out';
      }else{
        ctx.globalCompositeOperation = 'source-over';
      }

      ctx.beginPath();
      ctx.lineWidth = parseInt( $('#select_linewidth').val() );
      ctx.lineCap = 'round';
      ctx.moveTo( mouse.startX, mouse.startY );
      ctx.lineTo( mouse.x, mouse.y );
      if( color != 'transparent' ){
        ctx.strokeStyle = color;
      }
      ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;

      if( stroke ){
        stroke.xys.push( [ mouse.x, mouse.y ] );
      }
    }
  });
  //. タッチしたら、描画OK(myDrawをtrue)
  canvas.addEventListener( "touchstart", function( e ){
    var t = e.changedTouches[0];
    var rect = t.target.getBoundingClientRect();
    mouse.isDrawing = true;
    mouse.startX = t.pageX - rect.left - borderWidth;
    mouse.startY = t.pageY - rect.top - borderWidth;

    stroke = {};
    stroke.color = $('#select_color').val();
    stroke.width = parseInt( $('#select_linewidth').val() );
    stroke.xys = [ [ mouse.startX, mouse.startY ] ];
  });
  //. タッチを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "touchend", function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'disabled', true );
    }
  });
  canvas.addEventListener( 'touchcancel', function( e ){
    mouse.isDrawing = false;

    if( stroke ){
      undos.push( stroke );
      $('#undo_btn').prop( 'disabled', false );
      stroke = null;
      redos = [];
      $('#redo_btn').prop( 'display', true );
    }
  });

  $('#select_color').change( function(){
    var color = $(this).val();
    if( color == 'white' ){
      color = 'lightgray';
    }else if( color == 'transparent' ){
      color = 'black';
    }
    $(this).css( { 'color': color } );
    $('#select_linewidth').css( { 'color': color } );
    $('#setbg_btn').css( { 'background': color } );
  });

  //. リサイズ時に Canvas サイズを変更する
  $(window).on( 'load resize', function(){
    resized();
  });
  resized();

  //. スクロール禁止
  /*
  $(window).on('touchmove.noScroll', function( e ){
    e.preventDefault();
  });
  */
  var movefun = function( event ){
    event.preventDefault();
  }
  window.addEventListener( 'touchmove', movefun, { passive: false } );
}

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;
  var canvas = document.getElementById( 'mycanvas' );
  if( canvas && canvas.getContext ){
    canvas.width = browserWidth * 0.8;
    canvas.height = browserHeight * 0.6;
<% if( doodle ){ %>
    var ctx = canvas.getContext( '2d' );
    var background = new Image();
    background.src = '/image/<%= doodle._id %>';
    background.onload = function(){
      ctx.drawImage( background, 0, 0, canvas.width, canvas.height );
    }
<% } %>
  }
}

function resetCanvas( no_reset_unredo ){
  init();
  resized();

  if( !no_reset_unredo ){
    undos = [];
    redos = [];
    backgroundcolor = null;
  }
}

function isAndroid(){
  return ( navigator.userAgent.indexOf( 'Android' ) > 0 );
}

function save(){
  var canvas = document.getElementById( 'mycanvas' );
  if( !canvas || !canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );

  //. 画像データ
  var png = canvas.toDataURL( 'image/png' );
  png = png.replace( /^.*,/, '' );

  //. バイナリ変換
  var bin = atob( png );
  var buffer = new Uint8Array( bin.length );
  for( var i = 0; i < bin.length; i ++ ){
    buffer[i] = bin.charCodeAt( i );
  }
  var blob = new Blob( [buffer.buffer], {
    type: 'image/png'
  });

  //. フォームにして送信
  var formData = new FormData();
  formData.append( 'image', blob );    //. <form enctype='multipart/formdata'><input name='image' type='file'/> ...
  formData.append( 'timestamp', ( new Date() ).getTime() );
  formData.append( 'text', $('#doodle_text').val() );

  var id = $('#doodle_id').val();
  if( id ){
    $.ajax({
      type: 'PUT',
      url: '/doodle/' + id,
      data: formData,
      contentType: false,
      processData: false,
      success: function( data, dataType ){
        console.log( data );
      },
      error: function( jqXHR, textStatus, errorThrown ){
        console.log( textStatus + ': ' + errorThrown );
      }
    });
  }else{
    $.ajax({
      type: 'POST',
      url: '/doodle',
      data: formData,
      contentType: false,
      processData: false,
      success: function( data, dataType ){
        console.log( data );
      },
      error: function( jqXHR, textStatus, errorThrown ){
        console.log( textStatus + ': ' + errorThrown );
      }
    });
  }
}

function undo(){
  if( undos && undos.length > 0 ){
    var last_stroke = undos.pop();
    if( undos.length == 0 ){
      $('#undo_btn').prop( 'disabled', true );
    }
    redos.push( last_stroke );
    $('#redo_btn').prop( 'disabled', false );

    redrawCanvas();
  }
}

function redo(){
  if( redos && redos.length > 0 ){
    var last_stroke = redos.pop();
    if( redos.length == 0 ){
      $('#redo_btn').prop( 'disabled', true );
    }
    undos.push( last_stroke );
    $('#undo_btn').prop( 'disabled', false );

    redrawCanvas();
  }
}

function setBG(){
  var color = $('#select_color').val();
  if( color ){
    if( color != 'transparent' ){
      backgroundcolor = color;
    }else{
      backgroundcolor = null;
    }
    redrawCanvas();
  }
}

function redrawCanvas(){
  if( undos && undos.length >= 0 ){
    resetCanvas( true );

    if( backgroundcolor ){
      var canvas = document.getElementById( 'mycanvas' );
      if( !canvas || !canvas.getContext ){
        return false;
      }
      var ctx = canvas.getContext( '2d' );

      //. 全体をベタ塗り
      ctx.beginPath();
      ctx.fillStyle = backgroundcolor; //"rgb( 255, 255, 255 )";
      ctx.fillRect( 0, 0, canvas.width, canvas.height );
      ctx.stroke();
    }

    for( var i = 0; i < undos.length; i ++ ){
      var stroke = undos[i];

      for( var j = 1; j < stroke.xys.length; j ++ ){
        var canvas = document.getElementById( 'mycanvas' );
        if( !canvas || !canvas.getContext ){
          return false;
        }
        var ctx = canvas.getContext( '2d' );

        var color = stroke.color;
        if( color == 'transparent' ){
          ctx.globalCompositeOperation = 'destination-out';
        }else{
          ctx.globalCompositeOperation = 'source-over';
        }

        ctx.beginPath();
        ctx.lineWidth = stroke.width;
        ctx.lineCap = 'round';
        ctx.moveTo( stroke.xys[j-1][0], stroke.xys[j-1][1] );
        ctx.lineTo( stroke.xys[j][0], stroke.xys[j][1] );
        if( color != 'transparent' ){
          ctx.strokeStyle = color;
        }
        ctx.stroke();
      }
    }
  }
}

function generateUUID(){
  //. Cookie の値を調べて、有効ならその値で、空だった場合は生成する
  var did = null;
  cookies = document.cookie.split(";");
  for( var i = 0; i < cookies.length; i ++ ){
    var str = cookies[i].split("=");
    if( unescape( str[0] ) == " deviceid" ){
      did = unescape( unescape( str[1] ) );
    }
  }

  if( did == null ){
    var s = 1000;
    did = ( new Date().getTime().toString(16) ) + Math.floor( s * Math.random() ).toString(16);
    document.cookie = ( "deviceid=" + did );
  }

  return did;
}
</script>
<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
#mycanvas{
  border: 1px solid #333;
}
</style>
</head>
<body>

<%- include('./navi', { page: 'index', user: user, doodle: null }) %>

<select id="select_color" name="select_color">
  <option style="color:black;" value="transparent"><%= __('common.color.transparent') %></option>
  <option style="color:black;" value="black" selected="selected"><%= __('common.color.black') %></option>
  <option style="color:lightgray;" value="white"><%= __('common.color.white') %></option>
  <option style="color:red;" value="red"><%= __('common.color.red') %></option>
  <option style="color:blue;" value="blue"><%= __('common.color.blue') %></option>
  <option style="color:green;" value="green"><%= __('common.color.green') %></option>
  <option style="color:yellow;" value="yellow"><%= __('common.color.yellow') %></option>
  <option style="color:cyan;" value="cyan"><%= __('common.color.cyan') %></option>
  <option style="color:magenta;" value="magenta"><%= __('common.color.magenta') %></option>
  <option style="color:gray;" value="gray"><%= __('common.color.gray') %></option>
  <option style="color:#ef8f9c;" value="#ef8f9c"><%= __('common.color.pink') %></option>
  <option style="color:#ead2ad;" value="#ead2ad"><%= __('common.color.beige') %></option>
  <option style="color:#7c6035;" value="#7c6035"><%= __('common.color.brown') %></option>
</select>

<select id="select_linewidth" name="select_linewidth">
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
  <option value="4">4</option>
  <option value="5" selected="selected">5</option>
  <option value="6">6</option>
  <option value="7">7</option>
  <option value="8">8</option>
  <option value="9">9</option>
  <option value="10">10</option>
</select>

<input type="button" class="btn btn-xs btn-secondary p-0" id="setbg_btn" value="<%= __('common.button.background') %>" onClick="setBG();"/>
<a href="#" class="btn btn-xs btn-secondary p-0" data-toggle="modal" data-target="#myModal" id="comment_btn"><i class="fas fa-font"></i></a>

<div id="canvas_div">
  <div id="cdiv"></div>

  <br/>
  <input type="button" class="btn btn-xs" id="undo_btn" value="<" onClick="undo();" disabled="disabled"/>
  <input type="button" class="btn btn-xs btn-warning" value="<%= __('common.button.reset') %>" onClick="resetCanvas();"/>
  <input type="button" class="btn btn-xs btn-primary" id="save_btn" value="<%= __('common.button.save') %>" onClick="save();"<% if( !user ){%> disabled<%}%>/>
  <input type="button" class="btn btn-xs" id="redo_btn" value=">" onClick="redo();" disabled="disabled"/>
</div>

<div class="modal bd-example-modal-lg fade" id="myModal" tabindex="-1" role="dialog" aria-labbelledby="myModal" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Text</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="myModalBody">
        <input type="hidden" id="doodle_id" value=""/>
				<textarea id="doodle_text" class="form-control"></textarea>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<%- include('./footer', { page: 'index' }) %>
